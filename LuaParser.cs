//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lua.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace lua_parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, SPACE=56, NAME=57, NUMERAL=58, STR_LIT=59;
	public const int
		RULE_start = 0, RULE_nonaugmented_start = 1, RULE_nempty_list_of_stat = 2, 
		RULE_allow_empty_list_of_stat = 3, RULE_list_of_stat = 4, RULE_optional_retstat = 5, 
		RULE_block = 6, RULE_optional_semicol = 7, RULE_retstat = 8, RULE_nempty_list_of_elseif = 9, 
		RULE_allow_empty_list_of_elseif = 10, RULE_list_of_elseif = 11, RULE_optional_else = 12, 
		RULE_stat = 13, RULE_opt_assign_rhs = 14, RULE_range = 15, RULE_range_tail = 16, 
		RULE_elseif = 17, RULE_else__x_ = 18, RULE_exp = 19, RULE_binexp = 20, 
		RULE_binseq = 21, RULE_binoperand = 22, RULE_unaryexp = 23, RULE_exponent = 24, 
		RULE_prefixexp = 25, RULE_atom = 26, RULE_nonempty_seplist_of_comma_and_exp = 27, 
		RULE_allow_empty_o_nonempty_seplist_of_comma_and_exp_p_ = 28, RULE_seplist_o__i__s__i__s_exp_p_ = 29, 
		RULE_args = 30, RULE_opt_o__i_name_k__p_ = 31, RULE_opt_o_parlist_p_ = 32, 
		RULE_functiondef = 33, RULE_varargs = 34, RULE_nempty_seplist_of_comma_and_name = 35, 
		RULE_parlist = 36, RULE_nempty_fields = 37, RULE_allow_empty_fields = 38, 
		RULE_field_list = 39, RULE_optional_fieldsep = 40, RULE_tableconstructor = 41, 
		RULE_field = 42, RULE_fieldsep = 43, RULE_binop = 44;
	public static readonly string[] ruleNames = {
		"start", "nonaugmented_start", "nempty_list_of_stat", "allow_empty_list_of_stat", 
		"list_of_stat", "optional_retstat", "block", "optional_semicol", "retstat", 
		"nempty_list_of_elseif", "allow_empty_list_of_elseif", "list_of_elseif", 
		"optional_else", "stat", "opt_assign_rhs", "range", "range_tail", "elseif", 
		"else__x_", "exp", "binexp", "binseq", "binoperand", "unaryexp", "exponent", 
		"prefixexp", "atom", "nonempty_seplist_of_comma_and_exp", "allow_empty_o_nonempty_seplist_of_comma_and_exp_p_", 
		"seplist_o__i__s__i__s_exp_p_", "args", "opt_o__i_name_k__p_", "opt_o_parlist_p_", 
		"functiondef", "varargs", "nempty_seplist_of_comma_and_name", "parlist", 
		"nempty_fields", "allow_empty_fields", "field_list", "optional_fieldsep", 
		"tableconstructor", "field", "fieldsep", "binop"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'return'", "'='", "'::'", "'break'", "'goto'", "'do'", "'end'", 
		"'while'", "'repeat'", "'until'", "'if'", "'then'", "'for'", "'in'", "'local'", 
		"'function'", "'('", "')'", "','", "'elseif'", "'else'", "'#'", "'-'", 
		"'~'", "'not'", "'^'", "':'", "'['", "']'", "'.'", "'nil'", "'false'", 
		"'true'", "'...'", "'{'", "'}'", "'or'", "'and'", "'<'", "'>'", "'<='", 
		"'>='", "'~='", "'=='", "'|'", "'&'", "'<<'", "'>>'", "'..'", "'+'", "'*'", 
		"'/'", "'//'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "SPACE", "NAME", "NUMERAL", 
		"STR_LIT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public block result;
		public Nonaugmented_startContext v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonaugmented_startContext nonaugmented_start() {
			return GetRuleContext<Nonaugmented_startContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_localctx.v = nonaugmented_start();
			State = 91;
			Match(Eof);
			 _localctx.result =  _localctx.v.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonaugmented_startContext : ParserRuleContext {
		public block result;
		public BlockContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Nonaugmented_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonaugmented_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNonaugmented_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNonaugmented_start(this);
		}
	}

	[RuleVersion(0)]
	public Nonaugmented_startContext nonaugmented_start() {
		Nonaugmented_startContext _localctx = new Nonaugmented_startContext(Context, State);
		EnterRule(_localctx, 2, RULE_nonaugmented_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_localctx.var_0__1 = block();
			  _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_list_of_statContext : ParserRuleContext {
		public List<stmt> result;
		public Nempty_list_of_statContext var_1__1;
		public StatContext var_0__1;
		public StatContext var_1__2;
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_of_statContext nempty_list_of_stat() {
			return GetRuleContext<Nempty_list_of_statContext>(0);
		}
		public Nempty_list_of_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_list_of_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNempty_list_of_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNempty_list_of_stat(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_list_of_statContext nempty_list_of_stat() {
		return nempty_list_of_stat(0);
	}

	private Nempty_list_of_statContext nempty_list_of_stat(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_list_of_statContext _localctx = new Nempty_list_of_statContext(Context, _parentState);
		Nempty_list_of_statContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_nempty_list_of_stat, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 98;
			_localctx.var_0__1 = stat();
			  _localctx.result =  new List<stmt> { _localctx.var_0__1.result }; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_list_of_statContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_list_of_stat);
					State = 101;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 102;
					_localctx.var_1__2 = stat();
					 
					                          _localctx.result =  appendList<stmt>(_localctx.var_1__1.result, _localctx.var_1__2.result);
					                      
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_list_of_statContext : ParserRuleContext {
		public List<stmt> result;
		public Nempty_list_of_statContext var_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_of_statContext nempty_list_of_stat() {
			return GetRuleContext<Nempty_list_of_statContext>(0);
		}
		public Allow_empty_list_of_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_list_of_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_list_of_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_list_of_stat(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_list_of_statContext allow_empty_list_of_stat() {
		Allow_empty_list_of_statContext _localctx = new Allow_empty_list_of_statContext(Context, State);
		EnterRule(_localctx, 6, RULE_allow_empty_list_of_stat);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new List<stmt> {  }; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				_localctx.var_1__1 = nempty_list_of_stat(0);
				 _localctx.result =  _localctx.var_1__1.result; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_of_statContext : ParserRuleContext {
		public List<stmt> result;
		public Allow_empty_list_of_statContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_list_of_statContext allow_empty_list_of_stat() {
			return GetRuleContext<Allow_empty_list_of_statContext>(0);
		}
		public List_of_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_of_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterList_of_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitList_of_stat(this);
		}
	}

	[RuleVersion(0)]
	public List_of_statContext list_of_stat() {
		List_of_statContext _localctx = new List_of_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_list_of_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_localctx.var_0__1 = allow_empty_list_of_stat();
			 
			                _localctx.result =  _localctx.var_0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_retstatContext : ParserRuleContext {
		public maybe<stmt> result;
		public RetstatContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public Optional_retstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_retstat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOptional_retstat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOptional_retstat(this);
		}
	}

	[RuleVersion(0)]
	public Optional_retstatContext optional_retstat() {
		Optional_retstatContext _localctx = new Optional_retstatContext(Context, State);
		EnterRule(_localctx, 10, RULE_optional_retstat);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				_localctx.var_0__1 = retstat();
				 
				                _localctx.result =  (maybe<stmt>) some<stmt>(_localctx.var_0__1.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<stmt>) none<stmt>(); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public block result;
		public List_of_statContext var_0__1;
		public Optional_retstatContext var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public List_of_statContext list_of_stat() {
			return GetRuleContext<List_of_statContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_retstatContext optional_retstat() {
			return GetRuleContext<Optional_retstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_localctx.var_0__1 = list_of_stat();
			State = 126;
			_localctx.var_0__2 = optional_retstat();
			 
			                _localctx.result =  (block) new block(_localctx.var_0__1.result, _localctx.var_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_semicolContext : ParserRuleContext {
		public maybe<IToken> result;
		public IToken var_0__1;
		public Optional_semicolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_semicol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOptional_semicol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOptional_semicol(this);
		}
	}

	[RuleVersion(0)]
	public Optional_semicolContext optional_semicol() {
		Optional_semicolContext _localctx = new Optional_semicolContext(Context, State);
		EnterRule(_localctx, 14, RULE_optional_semicol);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				_localctx.var_0__1 = Match(T__0);
				 
				                _localctx.result =  (maybe<IToken>) some<IToken>((IToken) _localctx.var_0__1);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<IToken>) none<IToken>(); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public stmt result;
		public IToken var_0__1;
		public Seplist_o__i__s__i__s_exp_p_Context var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public Optional_semicolContext optional_semicol() {
			return GetRuleContext<Optional_semicolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 16, RULE_retstat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_localctx.var_0__1 = Match(T__1);
			State = 135;
			_localctx.var_0__2 = seplist_o__i__s__i__s_exp_p_();
			State = 136;
			optional_semicol();
			 
			                _localctx.result =  (stmt) new ReturnStmt(_localctx.var_0__1, _localctx.var_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_list_of_elseifContext : ParserRuleContext {
		public List<if_elseif> result;
		public Nempty_list_of_elseifContext var_1__1;
		public ElseifContext var_0__1;
		public ElseifContext var_1__2;
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext elseif() {
			return GetRuleContext<ElseifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_of_elseifContext nempty_list_of_elseif() {
			return GetRuleContext<Nempty_list_of_elseifContext>(0);
		}
		public Nempty_list_of_elseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_list_of_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNempty_list_of_elseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNempty_list_of_elseif(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_list_of_elseifContext nempty_list_of_elseif() {
		return nempty_list_of_elseif(0);
	}

	private Nempty_list_of_elseifContext nempty_list_of_elseif(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_list_of_elseifContext _localctx = new Nempty_list_of_elseifContext(Context, _parentState);
		Nempty_list_of_elseifContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_nempty_list_of_elseif, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 140;
			_localctx.var_0__1 = elseif();
			 _localctx.result =  new List<if_elseif> { _localctx.var_0__1.result }; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_list_of_elseifContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_list_of_elseif);
					State = 143;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 144;
					_localctx.var_1__2 = elseif();
					 
					                          _localctx.result =  appendList<if_elseif>(_localctx.var_1__1.result, _localctx.var_1__2.result);
					                      
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_list_of_elseifContext : ParserRuleContext {
		public List<if_elseif> result;
		public Nempty_list_of_elseifContext var_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_of_elseifContext nempty_list_of_elseif() {
			return GetRuleContext<Nempty_list_of_elseifContext>(0);
		}
		public Allow_empty_list_of_elseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_list_of_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_list_of_elseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_list_of_elseif(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_list_of_elseifContext allow_empty_list_of_elseif() {
		Allow_empty_list_of_elseifContext _localctx = new Allow_empty_list_of_elseifContext(Context, State);
		EnterRule(_localctx, 20, RULE_allow_empty_list_of_elseif);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new List<if_elseif> {  }; 
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				_localctx.var_1__1 = nempty_list_of_elseif(0);
				 _localctx.result =  _localctx.var_1__1.result; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_of_elseifContext : ParserRuleContext {
		public List<if_elseif> result;
		public Allow_empty_list_of_elseifContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_list_of_elseifContext allow_empty_list_of_elseif() {
			return GetRuleContext<Allow_empty_list_of_elseifContext>(0);
		}
		public List_of_elseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_of_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterList_of_elseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitList_of_elseif(this);
		}
	}

	[RuleVersion(0)]
	public List_of_elseifContext list_of_elseif() {
		List_of_elseifContext _localctx = new List_of_elseifContext(Context, State);
		EnterRule(_localctx, 22, RULE_list_of_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_localctx.var_0__1 = allow_empty_list_of_elseif();
			 _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_elseContext : ParserRuleContext {
		public maybe<if_else> result;
		public Else__x_Context var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Else__x_Context else__x_() {
			return GetRuleContext<Else__x_Context>(0);
		}
		public Optional_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOptional_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOptional_else(this);
		}
	}

	[RuleVersion(0)]
	public Optional_elseContext optional_else() {
		Optional_elseContext _localctx = new Optional_elseContext(Context, State);
		EnterRule(_localctx, 24, RULE_optional_else);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				_localctx.var_0__1 = else__x_();
				 _localctx.result =  some<if_else>(_localctx.var_0__1.result); 
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  none<if_else>(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public stmt result;
		public IToken var_0__1;
		public Nonempty_seplist_of_comma_and_expContext var_1__1;
		public Nonempty_seplist_of_comma_and_expContext var_1__3;
		public ExpContext var_2__1;
		public IToken var_3__2;
		public IToken var_4__1;
		public IToken var_5__1;
		public IToken var_5__2;
		public IToken var_6__1;
		public BlockContext var_6__2;
		public IToken var_7__1;
		public ExpContext var_7__2;
		public BlockContext var_7__4;
		public IToken var_8__1;
		public BlockContext var_8__2;
		public ExpContext var_8__4;
		public IToken var_9__1;
		public ExpContext var_9__2;
		public List_of_elseifContext var_9__4;
		public Optional_elseContext var_9__5;
		public IToken var_10__1;
		public IToken var_10__2;
		public RangeContext var_10__4;
		public BlockContext var_10__6;
		public IToken var_11__1;
		public Nempty_seplist_of_comma_and_nameContext var_11__2;
		public Nonempty_seplist_of_comma_and_expContext var_11__4;
		public BlockContext var_11__6;
		public IToken var_12__1;
		public IToken var_12__3;
		public Opt_o_parlist_p_Context var_12__5;
		public BlockContext var_12__7;
		public Nempty_seplist_of_comma_and_nameContext var_13__2;
		public Opt_assign_rhsContext var_13__3;
		[System.Diagnostics.DebuggerNonUserCode] public Nonempty_seplist_of_comma_and_expContext[] nonempty_seplist_of_comma_and_exp() {
			return GetRuleContexts<Nonempty_seplist_of_comma_and_expContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp(int i) {
			return GetRuleContext<Nonempty_seplist_of_comma_and_expContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_of_elseifContext list_of_elseif() {
			return GetRuleContext<List_of_elseifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_elseContext optional_else() {
			return GetRuleContext<Optional_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_of_comma_and_nameContext nempty_seplist_of_comma_and_name() {
			return GetRuleContext<Nempty_seplist_of_comma_and_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_parlist_p_Context opt_o_parlist_p_() {
			return GetRuleContext<Opt_o_parlist_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_assign_rhsContext opt_assign_rhs() {
			return GetRuleContext<Opt_assign_rhsContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 26, RULE_stat);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				_localctx.var_0__1 = Match(T__0);
				 
				                _localctx.result =  new EmptyStmt(_localctx.var_0__1);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				_localctx.var_1__1 = nonempty_seplist_of_comma_and_exp(0);
				State = 170;
				Match(T__2);
				State = 171;
				_localctx.var_1__3 = nonempty_seplist_of_comma_and_exp(0);
				 
				                _localctx.result =  new Assignment(false, _localctx.var_1__1.result, (maybe<List<expr>>)  some<List<expr>>(_localctx.var_1__3.result));
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				_localctx.var_2__1 = exp();
				 
				                _localctx.result =  (stmt) new ExprStmt(_localctx.var_2__1.result);
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				Match(T__3);
				State = 178;
				_localctx.var_3__2 = Match(NAME);
				State = 179;
				Match(T__3);
				 
				                _localctx.result =  new LabelStmt(_localctx.var_3__2);
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 181;
				_localctx.var_4__1 = Match(T__4);
				 
				                _localctx.result =  new BreakStmt(_localctx.var_4__1);
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 183;
				_localctx.var_5__1 = Match(T__5);
				State = 184;
				_localctx.var_5__2 = Match(NAME);
				 
				                _localctx.result =  new GotoStmt(_localctx.var_5__1, _localctx.var_5__2);
				            
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				_localctx.var_6__1 = Match(T__6);
				State = 187;
				_localctx.var_6__2 = block();
				State = 188;
				Match(T__7);
				 
				                _localctx.result =  new DoStmt(_localctx.var_6__1, _localctx.var_6__2.result);
				            
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 191;
				_localctx.var_7__1 = Match(T__8);
				State = 192;
				_localctx.var_7__2 = exp();
				State = 193;
				Match(T__6);
				State = 194;
				_localctx.var_7__4 = block();
				State = 195;
				Match(T__7);
				 
				                _localctx.result =  new WhileStmt(_localctx.var_7__1, _localctx.var_7__2.result, _localctx.var_7__4.result);
				            
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 198;
				_localctx.var_8__1 = Match(T__9);
				State = 199;
				_localctx.var_8__2 = block();
				State = 200;
				Match(T__10);
				State = 201;
				_localctx.var_8__4 = exp();
				 
				                _localctx.result =  new RepeatStmt(_localctx.var_8__1, _localctx.var_8__2.result, _localctx.var_8__4.result);
				            
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 204;
				_localctx.var_9__1 = Match(T__11);
				State = 205;
				_localctx.var_9__2 = exp();
				State = 206;
				Match(T__12);
				State = 207;
				_localctx.var_9__4 = list_of_elseif();
				State = 208;
				_localctx.var_9__5 = optional_else();
				State = 209;
				Match(T__7);
				 
				                _localctx.result =  new IfStmt( _localctx.var_9__1, _localctx.var_9__2.result, _localctx.var_9__4.result, _localctx.var_9__5.result);
				            
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 212;
				_localctx.var_10__1 = Match(T__13);
				State = 213;
				_localctx.var_10__2 = Match(NAME);
				State = 214;
				Match(T__2);
				State = 215;
				_localctx.var_10__4 = range();
				State = 216;
				Match(T__6);
				State = 217;
				_localctx.var_10__6 = block();
				State = 218;
				Match(T__7);
				 
				                _localctx.result =  new ForRangeStmt(_localctx.var_10__1, _localctx.var_10__2, _localctx.var_10__4.result, _localctx.var_10__6.result);
				            
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 221;
				_localctx.var_11__1 = Match(T__13);
				State = 222;
				_localctx.var_11__2 = nempty_seplist_of_comma_and_name(0);
				State = 223;
				Match(T__14);
				State = 224;
				_localctx.var_11__4 = nonempty_seplist_of_comma_and_exp(0);
				State = 225;
				Match(T__6);
				State = 226;
				_localctx.var_11__6 = block();
				State = 227;
				Match(T__7);
				 
				                _localctx.result =  new ForInStmt(_localctx.var_11__1, _localctx.var_11__2.result, _localctx.var_11__4.result, _localctx.var_11__6.result);
				            
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 230;
				_localctx.var_12__1 = Match(T__15);
				State = 231;
				Match(T__16);
				State = 232;
				_localctx.var_12__3 = Match(NAME);
				State = 233;
				Match(T__17);
				State = 234;
				_localctx.var_12__5 = opt_o_parlist_p_();
				State = 235;
				Match(T__18);
				State = 236;
				_localctx.var_12__7 = block();
				State = 237;
				Match(T__7);
				 
				                _localctx.result =  new ExprStmt(
				                    new FuncDef(_localctx.var_12__1, true, 
				                                some<IToken>(_localctx.var_12__3), _localctx.var_12__5.result, _localctx.var_12__7.result));
				            
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 240;
				Match(T__15);
				State = 241;
				_localctx.var_13__2 = nempty_seplist_of_comma_and_name(0);
				State = 242;
				_localctx.var_13__3 = opt_assign_rhs();
				 
				                _localctx.result =  new Assignment(true, listMap<IToken, expr>(_localctx.var_13__2.result, x => new Var(x)), _localctx.var_13__3.result);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_assign_rhsContext : ParserRuleContext {
		public maybe<List<expr>> result;
		public Nonempty_seplist_of_comma_and_expContext var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp() {
			return GetRuleContext<Nonempty_seplist_of_comma_and_expContext>(0);
		}
		public Opt_assign_rhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_assign_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOpt_assign_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOpt_assign_rhs(this);
		}
	}

	[RuleVersion(0)]
	public Opt_assign_rhsContext opt_assign_rhs() {
		Opt_assign_rhsContext _localctx = new Opt_assign_rhsContext(Context, State);
		EnterRule(_localctx, 28, RULE_opt_assign_rhs);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				Match(T__2);
				State = 248;
				_localctx.var_0__2 = nonempty_seplist_of_comma_and_exp(0);
				 _localctx.result =  some<List<expr>>(_localctx.var_0__2.result); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  none<List<expr>>(); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public range result;
		public ExpContext var_0__1;
		public ExpContext var_0__3;
		public Range_tailContext var_0__4;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_tailContext range_tail() {
			return GetRuleContext<Range_tailContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_localctx.var_0__1 = exp();
			State = 255;
			Match(T__19);
			State = 256;
			_localctx.var_0__3 = exp();
			State = 257;
			_localctx.var_0__4 = range_tail();
			 
			        _localctx.result =  new range(_localctx.var_0__1.result, _localctx.var_0__3.result, _localctx.var_0__4.result);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_tailContext : ParserRuleContext {
		public maybe<expr> result;
		public ExpContext var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Range_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRange_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRange_tail(this);
		}
	}

	[RuleVersion(0)]
	public Range_tailContext range_tail() {
		Range_tailContext _localctx = new Range_tailContext(Context, State);
		EnterRule(_localctx, 32, RULE_range_tail);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(T__19);
				State = 261;
				_localctx.var_0__2 = exp();
				 _localctx.result =  some<expr>(_localctx.var_0__2.result); 
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  none<expr>(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		public if_elseif result;
		public IToken var_0__1;
		public ExpContext var_0__2;
		public BlockContext var_0__4;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitElseif(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.var_0__1 = Match(T__20);
			State = 268;
			_localctx.var_0__2 = exp();
			State = 269;
			Match(T__12);
			State = 270;
			_localctx.var_0__4 = block();
			 
			                _localctx.result =  new if_elseif(_localctx.var_0__1, _localctx.var_0__2.result, _localctx.var_0__4.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else__x_Context : ParserRuleContext {
		public if_else result;
		public IToken var_0__1;
		public BlockContext var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else__x_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else__x_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterElse__x_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitElse__x_(this);
		}
	}

	[RuleVersion(0)]
	public Else__x_Context else__x_() {
		Else__x_Context _localctx = new Else__x_Context(Context, State);
		EnterRule(_localctx, 36, RULE_else__x_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_localctx.var_0__1 = Match(T__21);
			State = 274;
			_localctx.var_0__2 = block();
			  _localctx.result =  new if_else(_localctx.var_0__1, _localctx.var_0__2.result); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public expr result;
		public BinexpContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BinexpContext binexp() {
			return GetRuleContext<BinexpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 38, RULE_exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_localctx.var_0__1 = binexp();
			 _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinexpContext : ParserRuleContext {
		public expr result;
		public BinseqContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		public BinexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBinexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBinexp(this);
		}
	}

	[RuleVersion(0)]
	public BinexpContext binexp() {
		BinexpContext _localctx = new BinexpContext(Context, State);
		EnterRule(_localctx, 40, RULE_binexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_localctx.var_0__1 = binseq(0);
			 
			                _localctx.result =  mkBinOpSeq(
			                    _localctx.var_0__1.result, (op, l, r) => new Bin(op, l, r),
			                    ops => new UnsolvedBin(ops));
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinseqContext : ParserRuleContext {
		public List<Op<expr>> result;
		public BinseqContext var_0__1;
		public BinoperandContext var_1__1;
		public BinopContext var_0__2;
		public BinoperandContext var_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public BinoperandContext binoperand() {
			return GetRuleContext<BinoperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public BinseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBinseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBinseq(this);
		}
	}

	[RuleVersion(0)]
	public BinseqContext binseq() {
		return binseq(0);
	}

	private BinseqContext binseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BinseqContext _localctx = new BinseqContext(Context, _parentState);
		BinseqContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_binseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 284;
			_localctx.var_1__1 = binoperand();
			 _localctx.result =  new List<Op<expr>> { _localctx.var_1__1.result }; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinseqContext(_parentctx, _parentState);
					_localctx.var_0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_binseq);
					State = 287;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 288;
					_localctx.var_0__2 = binop();
					State = 289;
					_localctx.var_0__3 = binoperand();
					 
					                          _localctx.var_0__1.result.Add(_localctx.var_0__2.result);
					                          _localctx.var_0__1.result.Add(_localctx.var_0__3.result);
					                          _localctx.result =  _localctx.var_0__1.result;
					                      
					}
					} 
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinoperandContext : ParserRuleContext {
		public Op<expr> result;
		public UnaryexpContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpContext unaryexp() {
			return GetRuleContext<UnaryexpContext>(0);
		}
		public BinoperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binoperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBinoperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBinoperand(this);
		}
	}

	[RuleVersion(0)]
	public BinoperandContext binoperand() {
		BinoperandContext _localctx = new BinoperandContext(Context, State);
		EnterRule(_localctx, 44, RULE_binoperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_localctx.var_0__1 = unaryexp();
			 _localctx.result =  mkOperand(_localctx.var_0__1.result); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpContext : ParserRuleContext {
		public expr result;
		public IToken var_0__1;
		public ExponentContext var_0__2;
		public IToken var_1__1;
		public ExponentContext var_1__2;
		public IToken var_2__1;
		public ExponentContext var_2__2;
		public IToken var_3__1;
		public ExponentContext var_3__2;
		public ExponentContext var_4__1;
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public UnaryexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterUnaryexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitUnaryexp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpContext unaryexp() {
		UnaryexpContext _localctx = new UnaryexpContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryexp);
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				_localctx.var_0__1 = Match(T__22);
				State = 301;
				_localctx.var_0__2 = exponent();
				 _localctx.result =  new Len(_localctx.var_0__1, _localctx.var_0__2.result); 
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				_localctx.var_1__1 = Match(T__23);
				State = 305;
				_localctx.var_1__2 = exponent();
				 _localctx.result =  new Neg(_localctx.var_1__1, _localctx.var_1__2.result); 
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				_localctx.var_2__1 = Match(T__24);
				State = 309;
				_localctx.var_2__2 = exponent();
				 _localctx.result =  new Inv(_localctx.var_2__1, _localctx.var_2__2.result); 
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312;
				_localctx.var_3__1 = Match(T__25);
				State = 313;
				_localctx.var_3__2 = exponent();
				 _localctx.result =  new Not(_localctx.var_3__1, _localctx.var_3__2.result); 
				}
				break;
			case T__16:
			case T__17:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case NAME:
			case NUMERAL:
			case STR_LIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 316;
				_localctx.var_4__1 = exponent();
				 _localctx.result =  _localctx.var_4__1.result; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public expr result;
		public PrefixexpContext var_0__1;
		public ExponentContext var_0__3;
		public PrefixexpContext var_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 48, RULE_exponent);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				_localctx.var_0__1 = prefixexp(0);
				State = 322;
				Match(T__26);
				State = 323;
				_localctx.var_0__3 = exponent();
				 _localctx.result =  new Exponent(_localctx.var_0__1.result, _localctx.var_0__3.result); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				_localctx.var_1__1 = prefixexp(0);
				 _localctx.result =  _localctx.var_1__1.result; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public expr result;
		public PrefixexpContext var_2__1;
		public PrefixexpContext var_3__1;
		public PrefixexpContext var_4__1;
		public PrefixexpContext var_5__1;
		public IToken var_0__1;
		public IToken var_1__1;
		public ExpContext var_1__2;
		public AtomContext var_6__1;
		public ArgsContext var_2__2;
		public IToken var_3__3;
		public ArgsContext var_3__4;
		public ExpContext var_4__3;
		public IToken var_5__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		return prefixexp(0);
	}

	private PrefixexpContext prefixexp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrefixexpContext _localctx = new PrefixexpContext(Context, _parentState);
		PrefixexpContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_prefixexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 332;
				_localctx.var_0__1 = Match(NAME);
				 _localctx.result =  new Var(_localctx.var_0__1); 
				}
				break;
			case T__17:
				{
				State = 334;
				_localctx.var_1__1 = Match(T__17);
				State = 335;
				_localctx.var_1__2 = exp();
				State = 336;
				Match(T__18);
				 _localctx.result =  new NestedExp(_localctx.var_1__1, _localctx.var_1__2.result); 
				}
				break;
			case T__16:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case NUMERAL:
			case STR_LIT:
				{
				State = 339;
				_localctx.var_6__1 = atom();
				 _localctx.result =  _localctx.var_6__1.result; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 364;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.var_2__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 344;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 345;
						_localctx.var_2__2 = args();
						 _localctx.result =  new CallFunc(_localctx.var_2__1.result, _localctx.var_2__2.result); 
						}
						break;
					case 2:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.var_3__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 348;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 349;
						Match(T__27);
						State = 350;
						_localctx.var_3__3 = Match(NAME);
						State = 351;
						_localctx.var_3__4 = args();
						 
						                  _localctx.result =  new CallMethod(_localctx.var_3__1.result, _localctx.var_3__3, _localctx.var_3__4.result); 
						}
						break;
					case 3:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.var_4__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 354;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 355;
						Match(T__28);
						State = 356;
						_localctx.var_4__3 = exp();
						State = 357;
						Match(T__29);
						 _localctx.result =  new Index(_localctx.var_4__1.result, _localctx.var_4__3.result); 
						}
						break;
					case 4:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.var_5__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 360;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 361;
						Match(T__30);
						State = 362;
						_localctx.var_5__3 = Match(NAME);
						 _localctx.result =  new Attr(_localctx.var_5__1.result, _localctx.var_5__3); 
						}
						break;
					}
					} 
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public expr result;
		public IToken var_0__1;
		public IToken var_1__1;
		public IToken var_2__1;
		public IToken var_3__1;
		public IToken var_4__1;
		public IToken var_5__1;
		public FunctiondefContext var_6__1;
		public TableconstructorContext var_7__1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERAL() { return GetToken(LuaParser.NUMERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LIT() { return GetToken(LuaParser.STR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 52, RULE_atom);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				_localctx.var_0__1 = Match(T__31);
				 _localctx.result =  new Nil(_localctx.var_0__1); 
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				_localctx.var_1__1 = Match(T__32);
				 _localctx.result =  new Bool(_localctx.var_1__1, false); 
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373;
				_localctx.var_2__1 = Match(T__33);
				 _localctx.result =  new Bool(_localctx.var_2__1, true); 
				}
				break;
			case NUMERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375;
				_localctx.var_3__1 = Match(NUMERAL);
				 _localctx.result =  new Num(_localctx.var_3__1); 
				}
				break;
			case STR_LIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377;
				_localctx.var_4__1 = Match(STR_LIT);
				 _localctx.result =  new String(_localctx.var_4__1); 
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 6);
				{
				State = 379;
				_localctx.var_5__1 = Match(T__34);
				 _localctx.result =  new Ellipse(_localctx.var_5__1); 
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381;
				_localctx.var_6__1 = functiondef();
				 _localctx.result =  _localctx.var_6__1.result; 
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 8);
				{
				State = 384;
				_localctx.var_7__1 = tableconstructor();
				 _localctx.result =  new TableExpr(_localctx.var_7__1.result); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonempty_seplist_of_comma_and_expContext : ParserRuleContext {
		public List<expr> result;
		public Nonempty_seplist_of_comma_and_expContext var_1__1;
		public ExpContext var_0__1;
		public ExpContext var_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp() {
			return GetRuleContext<Nonempty_seplist_of_comma_and_expContext>(0);
		}
		public Nonempty_seplist_of_comma_and_expContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonempty_seplist_of_comma_and_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNonempty_seplist_of_comma_and_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNonempty_seplist_of_comma_and_exp(this);
		}
	}

	[RuleVersion(0)]
	public Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp() {
		return nonempty_seplist_of_comma_and_exp(0);
	}

	private Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nonempty_seplist_of_comma_and_expContext _localctx = new Nonempty_seplist_of_comma_and_expContext(Context, _parentState);
		Nonempty_seplist_of_comma_and_expContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_nonempty_seplist_of_comma_and_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 390;
			_localctx.var_0__1 = exp();
			 _localctx.result =  new List<expr> { _localctx.var_0__1.result }; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nonempty_seplist_of_comma_and_expContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nonempty_seplist_of_comma_and_exp);
					State = 393;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 394;
					Match(T__19);
					State = 395;
					_localctx.var_1__3 = exp();
					 
					                          _localctx.var_1__1.result.Add(_localctx.var_1__3.result);
					                          _localctx.result =  _localctx.var_1__1.result;
					                      
					}
					} 
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context : ParserRuleContext {
		public List<expr> result;
		public Nonempty_seplist_of_comma_and_expContext var_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nonempty_seplist_of_comma_and_expContext nonempty_seplist_of_comma_and_exp() {
			return GetRuleContext<Nonempty_seplist_of_comma_and_expContext>(0);
		}
		public Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_o_nonempty_seplist_of_comma_and_exp_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_o_nonempty_seplist_of_comma_and_exp_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_o_nonempty_seplist_of_comma_and_exp_p_(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context allow_empty_o_nonempty_seplist_of_comma_and_exp_p_() {
		Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context _localctx = new Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context(Context, State);
		EnterRule(_localctx, 56, RULE_allow_empty_o_nonempty_seplist_of_comma_and_exp_p_);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new List<expr> {  }; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				_localctx.var_1__1 = nonempty_seplist_of_comma_and_exp(0);
				 _localctx.result =  _localctx.var_1__1.result; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_exp_p_Context : ParserRuleContext {
		public List<expr> result;
		public Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context allow_empty_o_nonempty_seplist_of_comma_and_exp_p_() {
			return GetRuleContext<Allow_empty_o_nonempty_seplist_of_comma_and_exp_p_Context>(0);
		}
		public Seplist_o__i__s__i__s_exp_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_exp_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_exp_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_exp_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
		Seplist_o__i__s__i__s_exp_p_Context _localctx = new Seplist_o__i__s__i__s_exp_p_Context(Context, State);
		EnterRule(_localctx, 58, RULE_seplist_o__i__s__i__s_exp_p_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_localctx.var_0__1 = allow_empty_o_nonempty_seplist_of_comma_and_exp_p_();
			 _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public arguments result;
		public IToken var_0__1;
		public Seplist_o__i__s__i__s_exp_p_Context var_0__2;
		public TableconstructorContext var_1__1;
		public IToken var_2__1;
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LIT() { return GetToken(LuaParser.STR_LIT, 0); }
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 60, RULE_args);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				_localctx.var_0__1 = Match(T__17);
				State = 413;
				_localctx.var_0__2 = seplist_o__i__s__i__s_exp_p_();
				State = 414;
				Match(T__18);
				 _localctx.result =  new PositionalArgs(_localctx.var_0__1, _localctx.var_0__2.result); 
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				_localctx.var_1__1 = tableconstructor();
				 _localctx.result =  new TableArgs(_localctx.var_1__1.result); 
				}
				break;
			case STR_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 420;
				_localctx.var_2__1 = Match(STR_LIT);
				  _localctx.result =  new StringArg(_localctx.var_2__1); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o__i_name_k__p_Context : ParserRuleContext {
		public maybe<IToken> result;
		public IToken var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public Opt_o__i_name_k__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o__i_name_k__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOpt_o__i_name_k__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOpt_o__i_name_k__p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o__i_name_k__p_Context opt_o__i_name_k__p_() {
		Opt_o__i_name_k__p_Context _localctx = new Opt_o__i_name_k__p_Context(Context, State);
		EnterRule(_localctx, 62, RULE_opt_o__i_name_k__p_);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				_localctx.var_0__1 = Match(NAME);
				  _localctx.result =  some<IToken>((IToken) _localctx.var_0__1); 
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  none<IToken>(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o_parlist_p_Context : ParserRuleContext {
		public maybe<parameters> result;
		public ParlistContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public Opt_o_parlist_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_parlist_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOpt_o_parlist_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOpt_o_parlist_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_parlist_p_Context opt_o_parlist_p_() {
		Opt_o_parlist_p_Context _localctx = new Opt_o_parlist_p_Context(Context, State);
		EnterRule(_localctx, 64, RULE_opt_o_parlist_p_);
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				_localctx.var_0__1 = parlist();
				  _localctx.result =  some<parameters>(_localctx.var_0__1.result); 
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  none<parameters>(); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public expr result;
		public IToken var_0__1;
		public Opt_o__i_name_k__p_Context var_0__2;
		public Opt_o_parlist_p_Context var_0__4;
		public BlockContext var_0__6;
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o__i_name_k__p_Context opt_o__i_name_k__p_() {
			return GetRuleContext<Opt_o__i_name_k__p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_parlist_p_Context opt_o_parlist_p_() {
			return GetRuleContext<Opt_o_parlist_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 66, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			_localctx.var_0__1 = Match(T__16);
			State = 436;
			_localctx.var_0__2 = opt_o__i_name_k__p_();
			State = 437;
			Match(T__17);
			State = 438;
			_localctx.var_0__4 = opt_o_parlist_p_();
			State = 439;
			Match(T__18);
			State = 440;
			_localctx.var_0__6 = block();
			State = 441;
			Match(T__7);
			 
			            _localctx.result =  new FuncDef(
			                _localctx.var_0__1, false, _localctx.var_0__2.result,
			                _localctx.var_0__4.result,  _localctx.var_0__6.result);
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarargsContext : ParserRuleContext {
		public maybe<IToken> result;
		public IToken var_0__2;
		public VarargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarargs(this);
		}
	}

	[RuleVersion(0)]
	public VarargsContext varargs() {
		VarargsContext _localctx = new VarargsContext(Context, State);
		EnterRule(_localctx, 68, RULE_varargs);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				Match(T__19);
				State = 445;
				_localctx.var_0__2 = Match(T__34);
				 
				                _localctx.result =  some<IToken>(_localctx.var_0__2);
				            
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				 
				                _localctx.result =  none<IToken>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_seplist_of_comma_and_nameContext : ParserRuleContext {
		public List<IToken> result;
		public Nempty_seplist_of_comma_and_nameContext var_1__1;
		public IToken var_0__1;
		public IToken var_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_of_comma_and_nameContext nempty_seplist_of_comma_and_name() {
			return GetRuleContext<Nempty_seplist_of_comma_and_nameContext>(0);
		}
		public Nempty_seplist_of_comma_and_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_seplist_of_comma_and_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNempty_seplist_of_comma_and_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNempty_seplist_of_comma_and_name(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_seplist_of_comma_and_nameContext nempty_seplist_of_comma_and_name() {
		return nempty_seplist_of_comma_and_name(0);
	}

	private Nempty_seplist_of_comma_and_nameContext nempty_seplist_of_comma_and_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_seplist_of_comma_and_nameContext _localctx = new Nempty_seplist_of_comma_and_nameContext(Context, _parentState);
		Nempty_seplist_of_comma_and_nameContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_nempty_seplist_of_comma_and_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 451;
			_localctx.var_0__1 = Match(NAME);
			 
			                _localctx.result =  new List<IToken> { _localctx.var_0__1 };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_seplist_of_comma_and_nameContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_seplist_of_comma_and_name);
					State = 454;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 455;
					Match(T__19);
					State = 456;
					_localctx.var_1__3 = Match(NAME);
					 
					                          _localctx.var_1__1.result.Add(_localctx.var_1__3);
					                          _localctx.result =  _localctx.var_1__1.result;
					                      
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public parameters result;
		public IToken var_0__1;
		public Nempty_seplist_of_comma_and_nameContext var_1__1;
		public VarargsContext var_1__2;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_of_comma_and_nameContext nempty_seplist_of_comma_and_name() {
			return GetRuleContext<Nempty_seplist_of_comma_and_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargsContext varargs() {
			return GetRuleContext<VarargsContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 72, RULE_parlist);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				_localctx.var_0__1 = Match(T__34);
				 
				                _localctx.result =  new parameters(new List<IToken> {  }, some<IToken>((IToken) _localctx.var_0__1));
				            
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465;
				_localctx.var_1__1 = nempty_seplist_of_comma_and_name(0);
				State = 466;
				_localctx.var_1__2 = varargs();
				 
				                _localctx.result =  new parameters(_localctx.var_1__1.result, _localctx.var_1__2.result);
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_fieldsContext : ParserRuleContext {
		public List<table_field> result;
		public Nempty_fieldsContext var_1__1;
		public FieldContext var_0__1;
		public FieldContext var_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep() {
			return GetRuleContext<FieldsepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_fieldsContext nempty_fields() {
			return GetRuleContext<Nempty_fieldsContext>(0);
		}
		public Nempty_fieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNempty_fields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNempty_fields(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_fieldsContext nempty_fields() {
		return nempty_fields(0);
	}

	private Nempty_fieldsContext nempty_fields(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_fieldsContext _localctx = new Nempty_fieldsContext(Context, _parentState);
		Nempty_fieldsContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_nempty_fields, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 472;
			_localctx.var_0__1 = field();
			 
			                _localctx.result =  new List<table_field> { _localctx.var_0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_fieldsContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_fields);
					State = 475;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 476;
					fieldsep();
					State = 477;
					_localctx.var_1__3 = field();
					 
					                          _localctx.var_1__1.result.Add(_localctx.var_1__3.result);
					                          _localctx.result =  _localctx.var_1__1.result;
					                      
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_fieldsContext : ParserRuleContext {
		public List<table_field> result;
		public Nempty_fieldsContext var_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_fieldsContext nempty_fields() {
			return GetRuleContext<Nempty_fieldsContext>(0);
		}
		public Allow_empty_fieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_fields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_fields(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_fieldsContext allow_empty_fields() {
		Allow_empty_fieldsContext _localctx = new Allow_empty_fieldsContext(Context, State);
		EnterRule(_localctx, 76, RULE_allow_empty_fields);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__19:
			case T__36:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new List<table_field> {  }; 
				}
				break;
			case T__16:
			case T__17:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__28:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case NAME:
			case NUMERAL:
			case STR_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				_localctx.var_1__1 = nempty_fields(0);
				 _localctx.result =  _localctx.var_1__1.result; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_listContext : ParserRuleContext {
		public List<table_field> result;
		public Allow_empty_fieldsContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_fieldsContext allow_empty_fields() {
			return GetRuleContext<Allow_empty_fieldsContext>(0);
		}
		public Field_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField_list(this);
		}
	}

	[RuleVersion(0)]
	public Field_listContext field_list() {
		Field_listContext _localctx = new Field_listContext(Context, State);
		EnterRule(_localctx, 78, RULE_field_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_localctx.var_0__1 = allow_empty_fields();
			 _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_fieldsepContext : ParserRuleContext {
		public FieldsepContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep() {
			return GetRuleContext<FieldsepContext>(0);
		}
		public Optional_fieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOptional_fieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOptional_fieldsep(this);
		}
	}

	[RuleVersion(0)]
	public Optional_fieldsepContext optional_fieldsep() {
		Optional_fieldsepContext _localctx = new Optional_fieldsepContext(Context, State);
		EnterRule(_localctx, 80, RULE_optional_fieldsep);
		try {
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__36:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__0:
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				_localctx.var_0__1 = fieldsep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public table result;
		public IToken var_0__1;
		public Field_listContext var_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public Optional_fieldsepContext optional_fieldsep() {
			return GetRuleContext<Optional_fieldsepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_listContext field_list() {
			return GetRuleContext<Field_listContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 82, RULE_tableconstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_localctx.var_0__1 = Match(T__35);
			State = 499;
			_localctx.var_0__2 = field_list();
			State = 500;
			optional_fieldsep();
			State = 501;
			Match(T__36);
			 
			                _localctx.result =  new TableConstructor(_localctx.var_0__1, _localctx.var_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public table_field result;
		public IToken var_0__1;
		public ExpContext var_0__2;
		public ExpContext var_0__5;
		public IToken var_1__1;
		public ExpContext var_1__3;
		public ExpContext var_2__1;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 84, RULE_field);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				_localctx.var_0__1 = Match(T__28);
				State = 505;
				_localctx.var_0__2 = exp();
				State = 506;
				Match(T__29);
				State = 507;
				Match(T__2);
				State = 508;
				_localctx.var_0__5 = exp();
				 
				                _localctx.result =  new IndexField(_localctx.var_0__1, _localctx.var_0__2.result, _localctx.var_0__5.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511;
				_localctx.var_1__1 = Match(NAME);
				State = 512;
				Match(T__2);
				State = 513;
				_localctx.var_1__3 = exp();
				 
				                _localctx.result =  new NameField(_localctx.var_1__1,  _localctx.var_1__3.result);
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 516;
				_localctx.var_2__1 = exp();
				 
				                _localctx.result =  new ElementField(_localctx.var_2__1.result);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 86, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		public Op<expr> result;
		public IToken var_0__1;
		public IToken var_1__1;
		public IToken var_2__1;
		public IToken var_3__1;
		public IToken var_4__1;
		public IToken var_5__1;
		public IToken var_6__1;
		public IToken var_7__1;
		public IToken var_8__1;
		public IToken var_9__1;
		public IToken var_10__1;
		public IToken var_11__1;
		public IToken var_12__1;
		public IToken var_13__1;
		public IToken var_14__1;
		public IToken var_15__1;
		public IToken var_16__1;
		public IToken var_17__1;
		public IToken var_18__1;
		public IToken var_19__1;
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 88, RULE_binop);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				_localctx.var_0__1 = Match(T__37);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_0__1); 
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 525;
				_localctx.var_1__1 = Match(T__38);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_1__1); 
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				_localctx.var_2__1 = Match(T__39);
				 _localctx.result =  mkOperator<expr>((IToken) _localctx.var_2__1); 
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 529;
				_localctx.var_3__1 = Match(T__40);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_3__1); 
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 5);
				{
				State = 531;
				_localctx.var_4__1 = Match(T__41);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_4__1); 
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 6);
				{
				State = 533;
				_localctx.var_5__1 = Match(T__42);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_5__1); 
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 7);
				{
				State = 535;
				_localctx.var_6__1 = Match(T__43);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_6__1); 
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 8);
				{
				State = 537;
				_localctx.var_7__1 = Match(T__44);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_7__1); 
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 539;
				_localctx.var_8__1 = Match(T__45);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_8__1); 
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 10);
				{
				State = 541;
				_localctx.var_9__1 = Match(T__24);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_9__1); 
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 11);
				{
				State = 543;
				_localctx.var_10__1 = Match(T__46);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_10__1); 
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 12);
				{
				State = 545;
				_localctx.var_11__1 = Match(T__47);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_11__1); 
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 13);
				{
				State = 547;
				_localctx.var_12__1 = Match(T__48);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_12__1); 
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 14);
				{
				State = 549;
				_localctx.var_13__1 = Match(T__49);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_13__1); 
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 15);
				{
				State = 551;
				_localctx.var_14__1 = Match(T__50);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_14__1); 
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 16);
				{
				State = 553;
				_localctx.var_15__1 = Match(T__23);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_15__1); 
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 17);
				{
				State = 555;
				_localctx.var_16__1 = Match(T__51);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_16__1); 
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 18);
				{
				State = 557;
				_localctx.var_17__1 = Match(T__52);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_17__1); 
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 19);
				{
				State = 559;
				_localctx.var_18__1 = Match(T__53);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_18__1); 
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 20);
				{
				State = 561;
				_localctx.var_19__1 = Match(T__54);
				  _localctx.result =  mkOperator<expr>((IToken) _localctx.var_19__1); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return nempty_list_of_stat_sempred((Nempty_list_of_statContext)_localctx, predIndex);
		case 9: return nempty_list_of_elseif_sempred((Nempty_list_of_elseifContext)_localctx, predIndex);
		case 21: return binseq_sempred((BinseqContext)_localctx, predIndex);
		case 25: return prefixexp_sempred((PrefixexpContext)_localctx, predIndex);
		case 27: return nonempty_seplist_of_comma_and_exp_sempred((Nonempty_seplist_of_comma_and_expContext)_localctx, predIndex);
		case 35: return nempty_seplist_of_comma_and_name_sempred((Nempty_seplist_of_comma_and_nameContext)_localctx, predIndex);
		case 37: return nempty_fields_sempred((Nempty_fieldsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nempty_list_of_stat_sempred(Nempty_list_of_statContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_list_of_elseif_sempred(Nempty_list_of_elseifContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binseq_sempred(BinseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool prefixexp_sempred(PrefixexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool nonempty_seplist_of_comma_and_exp_sempred(Nonempty_seplist_of_comma_and_expContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_seplist_of_comma_and_name_sempred(Nempty_seplist_of_comma_and_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_fields_sempred(Nempty_fieldsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x238', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'l', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'o', '\v', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'u', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x87', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x96', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x99', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9F', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xA8', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xF8', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xFF', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x10C', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\x127', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x12A', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x142', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x14C', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x159', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', 
		'\x1B', '\x16F', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x172', '\v', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x186', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x191', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x194', 
		'\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x19A', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A9', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1AE', '\n', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1B4', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1C3', '\n', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\a', '%', '\x1CD', '\n', '%', '\f', '%', '\xE', '%', '\x1D0', 
		'\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x1D8', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\a', '\'', '\x1E3', '\n', '\'', '\f', '\'', '\xE', 
		'\'', '\x1E6', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x1EC', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x1F3', '\n', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x20A', '\n', ',', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x236', '\n', 
		'.', '\x3', '.', '\x2', '\t', '\x6', '\x14', ',', '\x34', '\x38', 'H', 
		'L', '/', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\x2', '\x3', '\x4', '\x2', '\x3', '\x3', '\x16', '\x16', '\x2', 
		'\x254', '\x2', '\\', '\x3', '\x2', '\x2', '\x2', '\x4', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x63', '\x3', '\x2', '\x2', '\x2', '\b', 't', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'v', '\x3', '\x2', '\x2', '\x2', '\f', '}', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x86', '\x3', '\x2', '\x2', '\x2', '\x12', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xFE', '\x3', '\x2', '\x2', '\x2', ' ', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x10D', '\x3', '\x2', '\x2', '\x2', '&', '\x113', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x117', '\x3', '\x2', '\x2', '\x2', '*', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x30', '\x141', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x187', '\x3', '\x2', '\x2', '\x2', ':', '\x199', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x19B', '\x3', '\x2', '\x2', '\x2', '>', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'H', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1D9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1ED', '\x3', '\x2', '\x2', '\x2', 'R', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x209', '\x3', '\x2', '\x2', '\x2', 'X', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x235', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', 
		'\x4', '\x3', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', '^', '_', '\b', 
		'\x2', '\x1', '\x2', '_', '\x3', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x5', '\xE', '\b', '\x2', '\x61', '\x62', '\b', '\x3', '\x1', '\x2', 
		'\x62', '\x5', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\b', '\x4', 
		'\x1', '\x2', '\x64', '\x65', '\x5', '\x1C', '\xF', '\x2', '\x65', '\x66', 
		'\b', '\x4', '\x1', '\x2', '\x66', 'm', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\f', '\x3', '\x2', '\x2', 'h', 'i', '\x5', '\x1C', '\xF', '\x2', 
		'i', 'j', '\b', '\x4', '\x1', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'g', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', '\a', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'u', '\b', '\x5', '\x1', '\x2', 'q', 'r', '\x5', '\x6', '\x4', 
		'\x2', 'r', 's', '\b', '\x5', '\x1', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 't', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\t', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\b', '\x5', 
		'\x2', 'w', 'x', '\b', '\x6', '\x1', '\x2', 'x', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x5', '\x12', '\n', '\x2', 'z', '{', '\b', '\a', '\x1', 
		'\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', '~', '\b', '\a', '\x1', 
		'\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\r', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x5', '\n', 
		'\x6', '\x2', '\x80', '\x81', '\x5', '\f', '\a', '\x2', '\x81', '\x82', 
		'\b', '\b', '\x1', '\x2', '\x82', '\xF', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x3', '\x2', '\x2', '\x84', '\x87', '\b', '\t', '\x1', 
		'\x2', '\x85', '\x87', '\b', '\t', '\x1', '\x2', '\x86', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x4', '\x2', 
		'\x2', '\x89', '\x8A', '\x5', '<', '\x1F', '\x2', '\x8A', '\x8B', '\x5', 
		'\x10', '\t', '\x2', '\x8B', '\x8C', '\b', '\n', '\x1', '\x2', '\x8C', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\b', '\v', '\x1', 
		'\x2', '\x8E', '\x8F', '\x5', '$', '\x13', '\x2', '\x8F', '\x90', '\b', 
		'\v', '\x1', '\x2', '\x90', '\x97', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\f', '\x3', '\x2', '\x2', '\x92', '\x93', '\x5', '$', '\x13', 
		'\x2', '\x93', '\x94', '\b', '\v', '\x1', '\x2', '\x94', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9F', '\b', '\f', '\x1', '\x2', '\x9B', '\x9C', '\x5', '\x14', '\v', 
		'\x2', '\x9C', '\x9D', '\b', '\f', '\x1', '\x2', '\x9D', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x16', '\f', '\x2', '\xA1', '\xA2', '\b', 
		'\r', '\x1', '\x2', '\xA2', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\x5', '&', '\x14', '\x2', '\xA4', '\xA5', '\b', '\xE', '\x1', 
		'\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\b', 
		'\xE', '\x1', '\x2', '\xA7', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\x3', '\x2', '\x2', '\xAA', '\xF8', '\b', 
		'\xF', '\x1', '\x2', '\xAB', '\xAC', '\x5', '\x38', '\x1D', '\x2', '\xAC', 
		'\xAD', '\a', '\x5', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x38', '\x1D', 
		'\x2', '\xAE', '\xAF', '\b', '\xF', '\x1', '\x2', '\xAF', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x5', '(', '\x15', '\x2', '\xB1', 
		'\xB2', '\b', '\xF', '\x1', '\x2', '\xB2', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '\x6', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		';', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x6', '\x2', '\x2', '\xB6', 
		'\xF8', '\b', '\xF', '\x1', '\x2', '\xB7', '\xB8', '\a', '\a', '\x2', 
		'\x2', '\xB8', '\xF8', '\b', '\xF', '\x1', '\x2', '\xB9', '\xBA', '\a', 
		'\b', '\x2', '\x2', '\xBA', '\xBB', '\a', ';', '\x2', '\x2', '\xBB', '\xF8', 
		'\b', '\xF', '\x1', '\x2', '\xBC', '\xBD', '\a', '\t', '\x2', '\x2', '\xBD', 
		'\xBE', '\x5', '\xE', '\b', '\x2', '\xBE', '\xBF', '\a', '\n', '\x2', 
		'\x2', '\xBF', '\xC0', '\b', '\xF', '\x1', '\x2', '\xC0', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\v', '\x2', '\x2', '\xC2', 
		'\xC3', '\x5', '(', '\x15', '\x2', '\xC3', '\xC4', '\a', '\t', '\x2', 
		'\x2', '\xC4', '\xC5', '\x5', '\xE', '\b', '\x2', '\xC5', '\xC6', '\a', 
		'\n', '\x2', '\x2', '\xC6', '\xC7', '\b', '\xF', '\x1', '\x2', '\xC7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '\f', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', '\xE', '\b', '\x2', '\xCA', '\xCB', '\a', 
		'\r', '\x2', '\x2', '\xCB', '\xCC', '\x5', '(', '\x15', '\x2', '\xCC', 
		'\xCD', '\b', '\xF', '\x1', '\x2', '\xCD', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\a', '\xE', '\x2', '\x2', '\xCF', '\xD0', '\x5', 
		'(', '\x15', '\x2', '\xD0', '\xD1', '\a', '\xF', '\x2', '\x2', '\xD1', 
		'\xD2', '\x5', '\x18', '\r', '\x2', '\xD2', '\xD3', '\x5', '\x1A', '\xE', 
		'\x2', '\xD3', '\xD4', '\a', '\n', '\x2', '\x2', '\xD4', '\xD5', '\b', 
		'\xF', '\x1', '\x2', '\xD5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\x10', '\x2', '\x2', '\xD7', '\xD8', '\a', ';', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x5', '\x2', '\x2', '\xD9', '\xDA', '\x5', 
		' ', '\x11', '\x2', '\xDA', '\xDB', '\a', '\t', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\xE', '\b', '\x2', '\xDC', '\xDD', '\a', '\n', '\x2', 
		'\x2', '\xDD', '\xDE', '\b', '\xF', '\x1', '\x2', '\xDE', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x10', '\x2', '\x2', '\xE0', 
		'\xE1', '\x5', 'H', '%', '\x2', '\xE1', '\xE2', '\a', '\x11', '\x2', '\x2', 
		'\xE2', '\xE3', '\x5', '\x38', '\x1D', '\x2', '\xE3', '\xE4', '\a', '\t', 
		'\x2', '\x2', '\xE4', '\xE5', '\x5', '\xE', '\b', '\x2', '\xE5', '\xE6', 
		'\a', '\n', '\x2', '\x2', '\xE6', '\xE7', '\b', '\xF', '\x1', '\x2', '\xE7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x12', '\x2', 
		'\x2', '\xE9', '\xEA', '\a', '\x13', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		';', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x14', '\x2', '\x2', '\xEC', 
		'\xED', '\x5', '\x42', '\"', '\x2', '\xED', '\xEE', '\a', '\x15', '\x2', 
		'\x2', '\xEE', '\xEF', '\x5', '\xE', '\b', '\x2', '\xEF', '\xF0', '\a', 
		'\n', '\x2', '\x2', '\xF0', '\xF1', '\b', '\xF', '\x1', '\x2', '\xF1', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x12', '\x2', 
		'\x2', '\xF3', '\xF4', '\x5', 'H', '%', '\x2', '\xF4', '\xF5', '\x5', 
		'\x1E', '\x10', '\x2', '\xF5', '\xF6', '\b', '\xF', '\x1', '\x2', '\xF6', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x5', '\x2', 
		'\x2', '\xFA', '\xFB', '\x5', '\x38', '\x1D', '\x2', '\xFB', '\xFC', '\b', 
		'\x10', '\x1', '\x2', '\xFC', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFF', '\b', '\x10', '\x1', '\x2', '\xFE', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x5', '(', '\x15', '\x2', '\x101', 
		'\x102', '\a', '\x16', '\x2', '\x2', '\x102', '\x103', '\x5', '(', '\x15', 
		'\x2', '\x103', '\x104', '\x5', '\"', '\x12', '\x2', '\x104', '\x105', 
		'\b', '\x11', '\x1', '\x2', '\x105', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x107', '\a', '\x16', '\x2', '\x2', '\x107', '\x108', '\x5', 
		'(', '\x15', '\x2', '\x108', '\x109', '\b', '\x12', '\x1', '\x2', '\x109', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', '\b', '\x12', '\x1', 
		'\x2', '\x10B', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '\x17', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'(', '\x15', '\x2', '\x10F', '\x110', '\a', '\xF', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\xE', '\b', '\x2', '\x111', '\x112', '\b', '\x13', '\x1', 
		'\x2', '\x112', '%', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\a', 
		'\x18', '\x2', '\x2', '\x114', '\x115', '\x5', '\xE', '\b', '\x2', '\x115', 
		'\x116', '\b', '\x14', '\x1', '\x2', '\x116', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x5', '*', '\x16', '\x2', '\x118', '\x119', 
		'\b', '\x15', '\x1', '\x2', '\x119', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x5', ',', '\x17', '\x2', '\x11B', '\x11C', '\b', '\x16', 
		'\x1', '\x2', '\x11C', '+', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\b', '\x17', '\x1', '\x2', '\x11E', '\x11F', '\x5', '.', '\x18', '\x2', 
		'\x11F', '\x120', '\b', '\x17', '\x1', '\x2', '\x120', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\f', '\x4', '\x2', '\x2', '\x122', 
		'\x123', '\x5', 'Z', '.', '\x2', '\x123', '\x124', '\x5', '.', '\x18', 
		'\x2', '\x124', '\x125', '\b', '\x17', '\x1', '\x2', '\x125', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x5', '\x30', '\x19', '\x2', '\x12C', '\x12D', 
		'\b', '\x18', '\x1', '\x2', '\x12D', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\a', '\x19', '\x2', '\x2', '\x12F', '\x130', '\x5', 
		'\x32', '\x1A', '\x2', '\x130', '\x131', '\b', '\x19', '\x1', '\x2', '\x131', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\a', '\x1A', '\x2', 
		'\x2', '\x133', '\x134', '\x5', '\x32', '\x1A', '\x2', '\x134', '\x135', 
		'\b', '\x19', '\x1', '\x2', '\x135', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x137', '\a', '\x1B', '\x2', '\x2', '\x137', '\x138', '\x5', 
		'\x32', '\x1A', '\x2', '\x138', '\x139', '\b', '\x19', '\x1', '\x2', '\x139', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x1C', '\x2', 
		'\x2', '\x13B', '\x13C', '\x5', '\x32', '\x1A', '\x2', '\x13C', '\x13D', 
		'\b', '\x19', '\x1', '\x2', '\x13D', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13F', '\x5', '\x32', '\x1A', '\x2', '\x13F', '\x140', '\b', 
		'\x19', '\x1', '\x2', '\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x136', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x31', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', 
		'\x34', '\x1B', '\x2', '\x144', '\x145', '\a', '\x1D', '\x2', '\x2', '\x145', 
		'\x146', '\x5', '\x32', '\x1A', '\x2', '\x146', '\x147', '\b', '\x1A', 
		'\x1', '\x2', '\x147', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', 
		'\x5', '\x34', '\x1B', '\x2', '\x149', '\x14A', '\b', '\x1A', '\x1', '\x2', 
		'\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\b', '\x1B', '\x1', 
		'\x2', '\x14E', '\x14F', '\a', ';', '\x2', '\x2', '\x14F', '\x159', '\b', 
		'\x1B', '\x1', '\x2', '\x150', '\x151', '\a', '\x14', '\x2', '\x2', '\x151', 
		'\x152', '\x5', '(', '\x15', '\x2', '\x152', '\x153', '\a', '\x15', '\x2', 
		'\x2', '\x153', '\x154', '\b', '\x1B', '\x1', '\x2', '\x154', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x5', '\x36', '\x1C', '\x2', 
		'\x156', '\x157', '\b', '\x1B', '\x1', '\x2', '\x157', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x158', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x170', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', 
		'\f', '\a', '\x2', '\x2', '\x15B', '\x15C', '\x5', '>', ' ', '\x2', '\x15C', 
		'\x15D', '\b', '\x1B', '\x1', '\x2', '\x15D', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\f', '\x6', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '\x1E', '\x2', '\x2', '\x160', '\x161', '\a', ';', '\x2', '\x2', 
		'\x161', '\x162', '\x5', '>', ' ', '\x2', '\x162', '\x163', '\b', '\x1B', 
		'\x1', '\x2', '\x163', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\f', '\x5', '\x2', '\x2', '\x165', '\x166', '\a', '\x1F', '\x2', '\x2', 
		'\x166', '\x167', '\x5', '(', '\x15', '\x2', '\x167', '\x168', '\a', ' ', 
		'\x2', '\x2', '\x168', '\x169', '\b', '\x1B', '\x1', '\x2', '\x169', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\f', '\x4', '\x2', '\x2', 
		'\x16B', '\x16C', '\a', '!', '\x2', '\x2', '\x16C', '\x16D', '\a', ';', 
		'\x2', '\x2', '\x16D', '\x16F', '\b', '\x1B', '\x1', '\x2', '\x16E', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x164', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x35', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\"', '\x2', '\x2', 
		'\x174', '\x186', '\b', '\x1C', '\x1', '\x2', '\x175', '\x176', '\a', 
		'#', '\x2', '\x2', '\x176', '\x186', '\b', '\x1C', '\x1', '\x2', '\x177', 
		'\x178', '\a', '$', '\x2', '\x2', '\x178', '\x186', '\b', '\x1C', '\x1', 
		'\x2', '\x179', '\x17A', '\a', '<', '\x2', '\x2', '\x17A', '\x186', '\b', 
		'\x1C', '\x1', '\x2', '\x17B', '\x17C', '\a', '=', '\x2', '\x2', '\x17C', 
		'\x186', '\b', '\x1C', '\x1', '\x2', '\x17D', '\x17E', '\a', '%', '\x2', 
		'\x2', '\x17E', '\x186', '\b', '\x1C', '\x1', '\x2', '\x17F', '\x180', 
		'\x5', '\x44', '#', '\x2', '\x180', '\x181', '\b', '\x1C', '\x1', '\x2', 
		'\x181', '\x186', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x5', 
		'T', '+', '\x2', '\x183', '\x184', '\b', '\x1C', '\x1', '\x2', '\x184', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x185', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x175', '\x3', '\x2', '\x2', '\x2', '\x185', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x185', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x186', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\b', '\x1D', '\x1', '\x2', '\x188', '\x189', 
		'\x5', '(', '\x15', '\x2', '\x189', '\x18A', '\b', '\x1D', '\x1', '\x2', 
		'\x18A', '\x192', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\f', 
		'\x3', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x16', '\x2', '\x2', '\x18D', 
		'\x18E', '\x5', '(', '\x15', '\x2', '\x18E', '\x18F', '\b', '\x1D', '\x1', 
		'\x2', '\x18F', '\x191', '\x3', '\x2', '\x2', '\x2', '\x190', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x39', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x195', '\x19A', '\b', '\x1E', '\x1', 
		'\x2', '\x196', '\x197', '\x5', '\x38', '\x1D', '\x2', '\x197', '\x198', 
		'\b', '\x1E', '\x1', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x195', '\x3', '\x2', '\x2', '\x2', '\x199', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', ';', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19C', '\x5', ':', '\x1E', '\x2', '\x19C', '\x19D', '\b', '\x1F', '\x1', 
		'\x2', '\x19D', '=', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', 
		'\x14', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '<', '\x1F', '\x2', '\x1A0', 
		'\x1A1', '\a', '\x15', '\x2', '\x2', '\x1A1', '\x1A2', '\b', ' ', '\x1', 
		'\x2', '\x1A2', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\x5', 'T', '+', '\x2', '\x1A4', '\x1A5', '\b', ' ', '\x1', '\x2', '\x1A5', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '=', '\x2', 
		'\x2', '\x1A7', '\x1A9', '\b', ' ', '\x1', '\x2', '\x1A8', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A9', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\a', ';', '\x2', '\x2', '\x1AB', '\x1AE', '\b', 
		'!', '\x1', '\x2', '\x1AC', '\x1AE', '\b', '!', '\x1', '\x2', '\x1AD', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\x5', 'J', '&', '\x2', '\x1B0', '\x1B1', '\b', '\"', '\x1', '\x2', '\x1B1', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B4', '\b', '\"', '\x1', 
		'\x2', '\x1B3', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '\x13', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', 
		'@', '!', '\x2', '\x1B7', '\x1B8', '\a', '\x14', '\x2', '\x2', '\x1B8', 
		'\x1B9', '\x5', '\x42', '\"', '\x2', '\x1B9', '\x1BA', '\a', '\x15', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x5', '\xE', '\b', '\x2', '\x1BB', '\x1BC', 
		'\a', '\n', '\x2', '\x2', '\x1BC', '\x1BD', '\b', '#', '\x1', '\x2', '\x1BD', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\a', '\x16', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\a', '%', '\x2', '\x2', '\x1C0', '\x1C3', '\b', 
		'$', '\x1', '\x2', '\x1C1', '\x1C3', '\b', '$', '\x1', '\x2', '\x1C2', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\b', 
		'%', '\x1', '\x2', '\x1C5', '\x1C6', '\a', ';', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\b', '%', '\x1', '\x2', '\x1C7', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\f', '\x3', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\a', '\x16', '\x2', '\x2', '\x1CA', '\x1CB', '\a', ';', '\x2', '\x2', 
		'\x1CB', '\x1CD', '\b', '%', '\x1', '\x2', '\x1CC', '\x1C8', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', 'I', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D2', '\a', '%', '\x2', '\x2', '\x1D2', '\x1D8', 
		'\b', '&', '\x1', '\x2', '\x1D3', '\x1D4', '\x5', 'H', '%', '\x2', '\x1D4', 
		'\x1D5', '\x5', '\x46', '$', '\x2', '\x1D5', '\x1D6', '\b', '&', '\x1', 
		'\x2', '\x1D6', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', 'K', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\b', '\'', 
		'\x1', '\x2', '\x1DA', '\x1DB', '\x5', 'V', ',', '\x2', '\x1DB', '\x1DC', 
		'\b', '\'', '\x1', '\x2', '\x1DC', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', '\x1DE', '\f', '\x3', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', 
		'X', '-', '\x2', '\x1DF', '\x1E0', '\x5', 'V', ',', '\x2', '\x1E0', '\x1E1', 
		'\b', '\'', '\x1', '\x2', '\x1E1', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EC', 
		'\b', '(', '\x1', '\x2', '\x1E8', '\x1E9', '\x5', 'L', '\'', '\x2', '\x1E9', 
		'\x1EA', '\b', '(', '\x1', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\x5', 'N', '(', '\x2', '\x1EE', '\x1EF', '\b', ')', 
		'\x1', '\x2', '\x1EF', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', 'X', '-', '\x2', 
		'\x1F2', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', 'S', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1F5', '\a', '&', '\x2', '\x2', '\x1F5', '\x1F6', '\x5', 'P', ')', '\x2', 
		'\x1F6', '\x1F7', '\x5', 'R', '*', '\x2', '\x1F7', '\x1F8', '\a', '\'', 
		'\x2', '\x2', '\x1F8', '\x1F9', '\b', '+', '\x1', '\x2', '\x1F9', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x1F', '\x2', '\x2', 
		'\x1FB', '\x1FC', '\x5', '(', '\x15', '\x2', '\x1FC', '\x1FD', '\a', ' ', 
		'\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x5', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\x5', '(', '\x15', '\x2', '\x1FF', '\x200', '\b', ',', '\x1', '\x2', 
		'\x200', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', 
		';', '\x2', '\x2', '\x202', '\x203', '\a', '\x5', '\x2', '\x2', '\x203', 
		'\x204', '\x5', '(', '\x15', '\x2', '\x204', '\x205', '\b', ',', '\x1', 
		'\x2', '\x205', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', 
		'\x5', '(', '\x15', '\x2', '\x207', '\x208', '\b', ',', '\x1', '\x2', 
		'\x208', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x201', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x206', '\x3', '\x2', '\x2', '\x2', '\x20A', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x20B', '\x20C', '\t', '\x2', '\x2', '\x2', '\x20C', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x20E', '\a', '(', '\x2', '\x2', '\x20E', 
		'\x236', '\b', '.', '\x1', '\x2', '\x20F', '\x210', '\a', ')', '\x2', 
		'\x2', '\x210', '\x236', '\b', '.', '\x1', '\x2', '\x211', '\x212', '\a', 
		'*', '\x2', '\x2', '\x212', '\x236', '\b', '.', '\x1', '\x2', '\x213', 
		'\x214', '\a', '+', '\x2', '\x2', '\x214', '\x236', '\b', '.', '\x1', 
		'\x2', '\x215', '\x216', '\a', ',', '\x2', '\x2', '\x216', '\x236', '\b', 
		'.', '\x1', '\x2', '\x217', '\x218', '\a', '-', '\x2', '\x2', '\x218', 
		'\x236', '\b', '.', '\x1', '\x2', '\x219', '\x21A', '\a', '.', '\x2', 
		'\x2', '\x21A', '\x236', '\b', '.', '\x1', '\x2', '\x21B', '\x21C', '\a', 
		'/', '\x2', '\x2', '\x21C', '\x236', '\b', '.', '\x1', '\x2', '\x21D', 
		'\x21E', '\a', '\x30', '\x2', '\x2', '\x21E', '\x236', '\b', '.', '\x1', 
		'\x2', '\x21F', '\x220', '\a', '\x1B', '\x2', '\x2', '\x220', '\x236', 
		'\b', '.', '\x1', '\x2', '\x221', '\x222', '\a', '\x31', '\x2', '\x2', 
		'\x222', '\x236', '\b', '.', '\x1', '\x2', '\x223', '\x224', '\a', '\x32', 
		'\x2', '\x2', '\x224', '\x236', '\b', '.', '\x1', '\x2', '\x225', '\x226', 
		'\a', '\x33', '\x2', '\x2', '\x226', '\x236', '\b', '.', '\x1', '\x2', 
		'\x227', '\x228', '\a', '\x34', '\x2', '\x2', '\x228', '\x236', '\b', 
		'.', '\x1', '\x2', '\x229', '\x22A', '\a', '\x35', '\x2', '\x2', '\x22A', 
		'\x236', '\b', '.', '\x1', '\x2', '\x22B', '\x22C', '\a', '\x1A', '\x2', 
		'\x2', '\x22C', '\x236', '\b', '.', '\x1', '\x2', '\x22D', '\x22E', '\a', 
		'\x36', '\x2', '\x2', '\x22E', '\x236', '\b', '.', '\x1', '\x2', '\x22F', 
		'\x230', '\a', '\x37', '\x2', '\x2', '\x230', '\x236', '\b', '.', '\x1', 
		'\x2', '\x231', '\x232', '\a', '\x38', '\x2', '\x2', '\x232', '\x236', 
		'\b', '.', '\x1', '\x2', '\x233', '\x234', '\a', '\x39', '\x2', '\x2', 
		'\x234', '\x236', '\b', '.', '\x1', '\x2', '\x235', '\x20D', '\x3', '\x2', 
		'\x2', '\x2', '\x235', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x235', '\x211', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x235', '\x215', '\x3', '\x2', '\x2', '\x2', '\x235', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x219', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x21B', '\x3', '\x2', '\x2', '\x2', '\x235', '\x21D', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x235', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x235', '\x225', '\x3', '\x2', '\x2', '\x2', '\x235', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x229', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x235', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x235', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x235', '\x233', '\x3', '\x2', '\x2', '\x2', 
		'\x236', '[', '\x3', '\x2', '\x2', '\x2', ' ', 'm', 't', '}', '\x86', 
		'\x97', '\x9E', '\xA7', '\xF7', '\xFE', '\x10B', '\x128', '\x141', '\x14B', 
		'\x158', '\x16E', '\x170', '\x185', '\x192', '\x199', '\x1A8', '\x1AD', 
		'\x1B3', '\x1C2', '\x1CE', '\x1D7', '\x1E4', '\x1EB', '\x1F2', '\x209', 
		'\x235',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace lua_parser
